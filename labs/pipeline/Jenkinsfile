#!groovy

// Run this pipeline on the custom Maven Slave ('maven-appdev')
// Maven Slaves have JDK and Maven already installed
// 'maven-appdev' has skopeo installed as well.
node('maven-appdev') {
    // Define Maven Command. Make sure it points to the correct
    // settings for our Nexus installation (use the service to
    // bypass the router). The file nexus_openshift_settings.xml
    // needs to be in the Source Code repository.
    // def mvnCmd = "mvn -s ./nexus_openshift_settings.xml -DskipTests clean package"
    // def mvnCmd = "mvn -s ./nexus_openshift_settings.xml -DskipTests clean package"
    def mvnCmd = "mvn -s ./nexus_openshift_settings.xml -DskipTests "
    def mvnUnitTest = "mvn test"


    // Set the tag for the development image: version + build number
    def devTag  = "0.0-0"
    // Set the tag for the production image: version
    def prodTag = "0.0"
    def commit_id = "unknown"

    // Checkout Source Code
    stage('Checkout Source') {
            git credentialsId: 'gogs-tjones', url: 'http://gogs-tjones-gogs.apps.rdu.example.opentlc.com/CICDLabs/openshift-tasks-private.git'
        }

    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("pom.xml")
    def artifactId = getArtifactIdFromPom("pom.xml")
    def version    = getVersionFromPom("pom.xml")
    def repositoryId = "Nexus"

    // setup some runtime variables
    stage('Init Variables') {
        echo "setting up devTag, prodTag, commit_id"
        sh "git rev-parse --short HEAD > .git/commit-id"
        commit_id = readFile('.git/commit-id').trim()
        devTag  = "${version}-${commit_id}-JenkinsBuildNum${env.BUILD_NUMBER}"
        prodTag = "${version}"
        echo "devTag=${devTag}"
        echo "prodTag=${prodTag}"
        echo "commid_id=${commit_id}"

    }

    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build war') {
        echo "Building version ${version}"
        echo "executing env.mvnCmd to \"${mvnCmd} clean packaage\""
        sh "${mvnCmd} clean package"

    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
        echo "Running Unit Tests with ${mvnUnitTest}"
        echo "skipping unit tests for speediness during pipeline development..."
        // sh "${mvnCmd} test"
    }

    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
        echo "Running Code Analysis"
        echo "skipping code analysis for speediness during pipeline development..."
        echo "TODO: define code analysis stage"
        // TBD
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
        echo "Publish to Nexus"
        // TBD
        // sh "mvn -s ./nexus_openshift_settings.xml deploy:deploy-file -DgroupId=tjones -DartifactId=${artifactId} -Dversion=${devTag} -DgeneratePom=true -Dpackaging=war -DrepositoryId=${repositoryId} -Durl=http://localhost:8081/nexus/content/repositories/releases -Dfile=target/project-1.0.0.jar"
        // sh "mvn -s ./nexus_openshift_settings.xml deploy:deploy-file -DgroupId=tjones -DartifactId=${artifactId} -Dversion=${devTag} -DgeneratePom=true -Dpackaging=war -DrepositoryId=${repositoryId} -Durl=http://nexus3-tjones-nexus.apps.rdu.example.opentlc.com/repository/releases/ -Dfile /tmp/workspace/tasks/target/openshift-tasks.war"
        sh "${mvnCmd} deploy -DaltDeploymentRepository=nexus::default::http://nexus3-tjones-nexus.apps.rdu.example.opentlc.com/repository/releases"

    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        sh "oc start-build tasks --follow --from-file=./target/openshift-tasks.war -n tjones-tasks-dev"

        openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: 'tasks', destTag: devTag, destinationAuthToken: '', destinationNamespace: 'tjones-tasks-dev', namespace: 'tjones-tasks-dev', srcStream: 'tasks', srcTag: 'latest', verbose: 'true'


    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        openshiftBuild apiURL: '', authToken: '', bldCfg: 'tasks', buildName: '', checkForTriggeredDeployments: 'true', commitID: '', namespace: 'tjones-tasks-dev', showBuildLogs: 'true', verbose: 'true', waitTime: '', waitUnit: 'sec'

        // TBD
    }

    // Run Integration Tests in the Development Environment.
    stage('Integration Tests') {
        echo "Running Integration Tests"
        // TBD
    }

    // Copy Image to Nexus Docker Registry
    stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"
        // TBD
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    // Do not activate the new version yet.
    def destApp   = "tasks-green"
    def activeApp = ""

    stage('Blue/Green Production Deployment') {
        // TBD
    }

    stage('Switch over to new Version') {
        // TBD
        echo "Switching Production application to ${destApp}."
        // TBD
    }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
    def matcher = readFile(pom) =~ '<version>(.+)</version>'
    matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
    def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
    matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
    def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
    matcher ? matcher[0][1] : null
}